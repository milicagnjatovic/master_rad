-- CREATE DATABASE GRADER;

CONNECT TO GRADER;

-- DROP TABLE IF EXISTS ROLES;
-- CREATE TABLE ROLES (
--     ID SMALLINT NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--     NAME VARCHAR(10),
--     DESCRIPTION VARCHAR(255),
--     CREATED_DATE DATE DEFAULT CURRENT_DATE
-- );
--
-- INSERT INTO ROLES(NAME, DESCRIPTION)
-- VALUES
--     ('admin', 'Namenjeno administratorima.'),
--     ('professor', 'Namenjeno profesorima.'),
--     ('student', 'Namenjeno studentima MATFa.'),
--     ('others', 'Namenjeno ostalim korisnicima.');
--
-- DROP TABLE IF EXISTS USERS;
-- CREATE TABLE USERS (
--     ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--     USERNAME VARCHAR(10) UNIQUE NOT NULL,
--     EMAIL VARCHAR(30) UNIQUE NOT NULL,
--     FIRST_NAME VARCHAR(20),
--     LAST_NAME VARCHAR(20),
--     CREATED_DATE DATE,
--     CORRECT_SUBMISSIONS SMALLINT,
--     INCORRECT_SUBMISSIONS SMALLINT,
--     ROLE_ID SMALLINT NOT NULL,
--     FOREIGN KEY FK_ROLE (ROLE_ID) REFERENCES ROLES(ID)
-- );
--
-- DROP TABLE IF EXISTS GRADERS;
-- CREATE TABLE GRADERS (
--     ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY, -- consider removing, IF name is able to change, eg stud2020 (old)
--     NAME VARCHAR(10) NOT NULL UNIQUE,
--     ENDPOINT VARCHAR(20) NOT NULL UNIQUE,
--     ACTIVE BOOLEAN,
--     CREATED_DATE DATE
-- );
--
-- DROP TABLE IF EXISTS TASKS;
-- CREATE TABLE TASKS (
--     ID INTEGER NOT NULL PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
--     GRADER_ID INTEGER NOT NULL,
--     FOREIGN KEY FK_GRADER (GRADER_ID) REFERENCES GRADERS(ID),
--     TEXT VARCHAR(1000) NOT NULL, -- TODO analyse task text lengths
--     SOLUTION VARCHAR(1000) NOT NULL, -- TODO analyse lengths
--     CORRECT_SUBMISSIONS SMALLINT,
--     INCORRECT_SUBMISSIONS SMALLINT,
--     LAST_GENERATED DATE
-- );
--
--
-- DROP TABLE IF EXISTS SUBMISSION;
-- CREATE TABLE SUBMISSION (
--     TASK_ID INTEGER NOT NULL,
--     USER_ID INTEGER NOT NULL,
--     IS_CORRECT BOOLEAN,
--     MESSAGE VARCHAR(50),
--     LAST_UPDATE_TIME DATE,
--     WAITING_FOR_RESPONSE BOOLEAN,
--     PRIMARY KEY (TASK_ID, USER_ID),
--     FOREIGN KEY FK_TASK (TASK_ID) REFERENCES TASKS(ID),
--     FOREIGN KEY FK_USER (USER_ID) REFERENCES USERS(ID)
-- );
--
-- DROP TABLE IF EXISTS MESSAGE;
-- CREATE TABLE MESSAGE (
--     STUDENT_ID INTEGER NOT NULL,
--     PROFESSOR_ID INTEGER NOT NULL,
--     TASK_ID INTEGER NOT NULL,
--     MESSAGE VARCHAR(256),
--     RESPONSE VARCHAR(256),
--     PRIMARY KEY (STUDENT_ID, PROFESSOR_ID, TASK_ID),
--     FOREIGN KEY FK_SUBMISSION (STUDENT_ID, TASK_ID) REFERENCES SUBMISSION(USER_ID, TASK_ID),
--     FOREIGN KEY FK_PROFESSOR (PROFESSOR_ID) REFERENCES USERS(ID)
-- );